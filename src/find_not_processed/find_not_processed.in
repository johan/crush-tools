#!CRUSH_PERL_PATH -w

#  Copyright 2008 Google Inc.
#
#  Licensed under the Apache License, Version 2.0 (the "License");
#  you may not use this file except in compliance with the License.
#  You may obtain a copy of the License at
#
#      http://www.apache.org/licenses/LICENSE-2.0
#
#  Unless required by applicable law or agreed to in writing, software
#  distributed under the License is distributed on an "AS IS" BASIS,
#  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
#  See the License for the specific language governing permissions and
#  limitations under the License.

use strict;
use DART::FileChecker;
use Getopt::Long;

my ($help, $dir, $logfile, $print_dir, $file_regex, $file_glob);

GetOptions("help" => \$help,
           "directory=s" => \$dir,
           "logfile=s" => \$logfile,
           "print-dir" => \$print_dir,
           "glob=s" => \$file_glob,
           "regex=s" => \$file_regex);

if ($help) {
  usage();
  exit(1);
}

if (! $dir) {
  die "$0: -d must be specified.\n";
} elsif (! -d $dir) {
  die "$0: invalid directory \"$dir\".\n";
}

if (! $logfile) {
  die "$0: -l must be specified.\n";
} elsif (! -f $logfile) {
  system("touch", "$logfile") == 0 or die "$0: error creating file $logfile\n";
}

my @files_to_run;
if ($file_regex) {
  @files_to_run = DART::FileChecker->dir_file_diff($logfile, $dir, $file_regex);
} else {
  @files_to_run = DART::FileChecker->dir_file_glob_diff($logfile,
                                                        $dir, $file_glob);
}

if ($print_dir) {
  if ($dir !~ m#/$#) { $dir .= '/' }
  foreach my $f (@files_to_run) {
    print $dir, $f , q();
  }
} else {
  print join(' ', @files_to_run);
}
print qq(\n);

exit(0);


sub usage {

  print STDERR << "ENDUSAGE";
finds files in a directory which are not listed in a log file

usage: $0 <options>

options:

  -h, --help              print this message and exit
  -d, --directory <DIR>   look for files in DIR (required)
  -l, --logfile <FILE>    compare directory against files in FILE (required)
  -p, --print-dir         print the full file path (default: just the name)
  -g, --glob <PATTERN>    only look for files matching PATTERN
  -r, --regex <PATTERN>   only look for files matching PATTERN

ENDUSAGE
}
