# data relevant to the application as a whole
%global = (
	name => "foreach_parallel",
	description => "processes a block of shell in parallel for multiple inputs",
	version => "\"CRUSH_PACKAGE_VERSION\"",
	trailing_opts => "<input ...>",
	usage_extra => "",
	do_long_opts => 1,
	preproc_extra => '#include <crush_version.h>',
	copyright => <<END_COPYRIGHT
   Copyright 2008 Google Inc.

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
END_COPYRIGHT
);

# descriptions of individual command-line arguments
# valid types are
#	flag		- no argument
#	var		- required argument
#	var_optional	- optional argument
#	custom_flag	- no arg, and specify parseopt_code 
#	custom_var	- required arg, and specify parseopt_code 
#	custom_var_optional - optional arg, and specify parseopt_code 
@args = ( {
	  name => 'help',
	  shortopt => 'h',
	  longopt => 'help',
	  type => 'flag',
	  required => 0,
	  main_code => 'usage(argv[0]); exit(EXIT_HELP);',
	  description => 'print this message and exit'
	},
#	{
#	  name => 'version',
#	  shortopt => 'V',
#	  longopt => 'version',
#	  type => 'flag',
#	  required => 0,
#	  main_code => 'version(); exit(1);',
#	  description => 'print version info and exit'
#	},
	{
	  name => 'verbose',
	  shortopt => 'V',
	  longopt => 'verbose',
	  type => 'flag',
	  required => 0,
	  description => 'print verbose runtime messages.',
	},
	{
	  name => 'variable',
	  shortopt => 'v',
	  longopt => 'variable',
	  type => 'var',
	  required => 1,
	  description => 'the variable name to hold the input value'
	},
	{
	  name => 'max_procs',
	  shortopt => 'l',
	  longopt => 'limit',
	  type => 'var',
	  required => 0,
	  description => 'the maximum number of processes to spawn at one time'
	},
	{
	  name => 'file',
	  shortopt => 'f',
	  longopt => 'file',
	  type => 'var',
	  required => 0,
	  description => 'execute code read from <file> (default: stdin)'
	},
);
